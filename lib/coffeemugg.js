// Generated by CoffeeScript 1.6.3
(function() {
  var CMContext, HTMLPlugin, NEWLINE, coffee, coffeemugg, elements, err, g_context, htmlEscape, merge_elements,
    __slice = [].slice;

  if (typeof window !== "undefined" && window !== null) {
    coffeemugg = window.CoffeeMugg = {};
    coffee = typeof CoffeeScript !== "undefined" && CoffeeScript !== null ? CoffeeScript : null;
  } else {
    coffeemugg = exports;
    try {
      coffee = require('coffee-script');
    } catch (_error) {
      err = _error;
      coffee = null;
    }
  }

  coffeemugg.version = '0.0.4';

  coffeemugg.doctypes = {
    'default': '<!DOCTYPE html>',
    '5': '<!DOCTYPE html>',
    'xml': '<?xml version="1.0" encoding="utf-8" ?>',
    'transitional': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',
    'strict': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">',
    'frameset': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">',
    '1.1': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">',
    'basic': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN" "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">',
    'mobile': '<!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.2//EN" "http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd">',
    'ce': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "ce-html-1.0-transitional.dtd">'
  };

  elements = {
    regular: 'a abbr address article aside audio b bdi bdo blockquote body button canvas\ncaption cite code colgroup datalist dd del details dfn div dl dt em fieldset\nfigcaption figure footer form h1 h2 h3 h4 h5 h6 head header hgroup html i\niframe ins kbd label legend li map mark menu meter nav noscript object ol\noptgroup option output p pre progress q rp rt ruby s samp script section\nselect small span strong style sub summary sup table tbody td textarea tfoot\nth thead time title tr u ul var video'.split(/\s+/),
    "void": 'area base br col command embed hr img input keygen link meta param\nsource track wbr'.split(/\s+/),
    obsolete: 'applet acronym bgsound dir frameset noframes isindex listing nextid noembed\nplaintext rb strike xmp big blink center font marquee multicol nobr spacer tt'.split(/\s+/),
    obsolete_void: 'basefont frame'.split(/\s+/)
  };

  merge_elements = function() {
    var a, args, element, result, _i, _j, _len, _len1, _ref;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    result = {};
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      a = args[_i];
      _ref = elements[a];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        element = _ref[_j];
        result[element] = true;
      }
    }
    return result;
  };

  coffeemugg.tags = merge_elements('regular', 'obsolete', 'void', 'obsolete_void');

  coffeemugg.self_closing = merge_elements('void', 'obsolete_void');

  htmlEscape = function(txt) {
    return String(txt).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
  };

  NEWLINE = {};

  coffeemugg.CMContext = CMContext = function(options) {
    var context, plugin, plugins, _i, _len, _ref;
    if (options == null) {
      options = {};
    }
    context = {
      options: void 0,
      _buffer: '',
      _newline: '',
      _indent: '',
      setOptions: function(options) {
        if (options.format == null) {
          options.format = true;
        }
        if (options.autoescape == null) {
          options.autoescape = true;
        }
        this.options = options;
        return this;
      },
      render: function() {
        var args, contents;
        contents = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (typeof contents === 'string') {
          if (coffee == null) {
            throw Error("Need module 'coffee-script' to compile code.");
          }
          eval("contents = function () {" + (coffee.compile(contents, {
            bare: true
          })) + "}");
        }
        this.reset();
        if (typeof contents === 'function') {
          contents.call.apply(contents, [this].concat(__slice.call(args)));
        }
        return this;
      },
      render_tag: function(name, args) {
        var a, attrs, contents, escapeContents, idclass, _i, _len;
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          a = args[_i];
          switch (typeof a) {
            case 'function':
              contents = a.bind(this);
              break;
            case 'object':
              attrs = a;
              break;
            case 'number':
            case 'boolean':
              contents = a;
              break;
            case 'string':
              if (args.length === 1) {
                contents = a;
              } else {
                if (a === args[0]) {
                  idclass = a;
                } else {
                  contents = a;
                }
              }
          }
        }
        this.rawnl("<" + name);
        if (idclass) {
          this.render_idclass(idclass);
        }
        if (attrs) {
          this.render_attrs(attrs);
        }
        if (coffeemugg.self_closing[name]) {
          this.raw(' />');
        } else {
          this.raw('>');
          escapeContents = name !== 'script';
          this.render_contents(contents, escapeContents);
          this.raw("</" + name + ">");
        }
        return NEWLINE;
      },
      render_idclass: function(str) {
        var classes, i, id, _i, _len, _ref;
        classes = [];
        str = String(str).replace(/"/, "&quot;");
        _ref = str.split(/\s*\.\s*/);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i[0] === '#') {
            id = i.slice(1);
          } else {
            if (i !== '') {
              classes.push(i);
            }
          }
        }
        if (id) {
          this.raw(" id=\"" + id + "\"");
        }
        if (classes.length > 0) {
          this.raw(" class=\"" + (classes.join(' ')) + "\"");
        }
        return null;
      },
      render_attrs: function(obj) {
        var k, v;
        for (k in obj) {
          v = obj[k];
          k = k.replace(/([A-Z])/g, '-$1').toLowerCase();
          if (typeof v === 'boolean' && v) {
            v = k;
          } else if (typeof v === 'function') {
            v = this.csToString(v);
          }
          if (v) {
            this.raw(" " + k + "=\"" + (String(v).replace(/&/g, "&amp;").replace(/"/g, "&quot;")) + "\"");
          }
        }
        return null;
      },
      render_contents: function(contents, escape) {
        if (typeof contents === 'function') {
          if (this.options.format) {
            this._indent += '  ';
          }
          contents = contents.call(this);
          if (this.options.format) {
            this._indent = this._indent.slice(2);
          }
          if (contents === NEWLINE) {
            this.rawnl("");
          }
        }
        switch (typeof contents) {
          case 'string':
          case 'number':
          case 'boolean':
            if (escape) {
              this.text(contents);
            } else {
              this.raw(contents);
            }
        }
        return null;
      },
      h: htmlEscape,
      doctype: function(type) {
        if (type == null) {
          type = 'default';
        }
        return this.rawnl(coffeemugg.doctypes[type]);
      },
      rawnl: function(txt) {
        this.raw("" + this._newline + this._indent + txt);
        if (this.options.format) {
          this._newline = "\n";
        }
        return null;
      },
      raw: function(txt) {
        this._buffer += txt;
        return null;
      },
      text: function(txt) {
        if (this.options.autoescape) {
          this._buffer += htmlEscape(txt);
        } else {
          this._buffer += txt;
        }
        return null;
      },
      tag: function() {
        var args, name;
        name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return this.render_tag(name, args);
      },
      comment: function(cmt) {
        this.rawnl("<!--" + cmt + "-->");
        return NEWLINE;
      },
      toString: function() {
        return this._buffer;
      },
      reset: function() {
        this._buffer = '';
        this._newline = '';
        this._indent = '';
        return this;
      }
    };
    context.setOptions(options);
    plugins = (_ref = options.plugins) != null ? _ref : [];
    plugins.unshift(HTMLPlugin);
    for (_i = 0, _len = plugins.length; _i < _len; _i++) {
      plugin = plugins[_i];
      if (typeof plugin === 'string') {
        plugin = require(plugin);
      }
      plugin(context);
    }
    return context;
  };

  HTMLPlugin = function(context) {
    var coffeescript_helpers, css_needs_prefix, css_props, p, parse_prop, parse_selector, prefixed_css_prop, tag, tags, valid_css_prop, _fn, _i, _imw, _j, _k, _len, _len1, _len2, _ref,
      _this = this;
    _ref = [coffeemugg.tags, coffeemugg.self_closing];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tags = _ref[_i];
      _fn = function(tag) {
        return context[tag] = function() {
          return this.render_tag(tag, arguments);
        };
      };
      for (tag in tags) {
        _fn(tag);
      }
    }
    context.ie = function(condition, contents) {
      this.rawnl("<!--[if " + condition + "]>");
      this.render_contents(contents);
      this.raw("<![endif]-->");
      return NEWLINE;
    };
    coffeescript_helpers = {
      "__extends": "function(child, parent) {\n  for (var key in parent) {\n    if (__hasProp.call(parent, key)) child[key] = parent[key];\n  }\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n  child.__super__ = parent.prototype;\n  return child;\n}".replace(/\s+/g, ' '),
      "__bind": "function(fn, me){\n  return function(){ return fn.apply(me, arguments); };\n}".replace(/\s+/g, ' '),
      "__indexOf": "[].indexOf || function(item) {\n  for (var i = 0, l = this.length; i < l; i++) {\n    if (i in this && this[i] === item) return i;\n  }\n  return -1;\n}".replace(/\s+/g, ' '),
      "__hasProp": '{}.hasOwnProperty',
      "__slice": '[].slice'
    };
    context.csToString = function(aFunction) {
      var helpers, k, t, v;
      helpers = '';
      t = "" + aFunction;
      for (k in coffeescript_helpers) {
        v = coffeescript_helpers[k];
        if (t.indexOf(k) >= 0) {
          if (helpers) {
            helpers += ',';
          }
          helpers += "" + k + "=" + v;
        }
      }
      if (helpers) {
        t = t.replace(/^[^{]+{/, "function(){var " + helpers + ";");
      }
      return "(" + t + ").call(this);";
    };
    context.coffeescript = function(param) {
      switch (typeof param) {
        case 'function':
          return this.script(this.csToString(param));
        case 'string':
          return this.script({
            type: 'text/coffeescript'
          }, function() {
            return param;
          });
        case 'object':
          param.type = 'text/coffeescript';
          return this.script(param);
      }
    };
    css_props = 'align-content align-items align-self alignment-adjust alignment-baseline\nanchor-point animation animation-delay animation-direction\nanimation-duration animation-iteration-count animation-name\nanimation-play-state animation-timing-function appearance azimuth\nbackface-visibility background background-attachment background-clip\nbackground-color background-image background-origin background-position\nbackground-repeat background-size baseline-shift binding bleed\nbookmark-label bookmark-level bookmark-state bookmark-target border\nborder-bottom border-bottom-color border-bottom-left-radius\nborder-bottom-right-radius border-bottom-style border-bottom-width\nborder-collapse border-color border-image border-image-outset\nborder-image-repeat border-image-slice border-image-source\nborder-image-width border-left border-left-color border-left-style\nborder-left-width border-radius border-right border-right-color\nborder-right-style border-right-width border-spacing border-style\nborder-top border-top-color border-top-left-radius border-top-right-radius\nborder-top-style border-top-width border-width bottom box-align\nbox-decoration-break box-direction box-flex box-lines box-ordinal-group\nbox-orient box-pack box-shadow box-sizing break-after break-before\nbreak-inside caption-side clear clip color color-profile column-count\ncolumn-fill column-gap column-rule column-rule-color column-rule-style\ncolumn-rule-width column-span column-width columns content counter-increment\ncounter-reset crop cue cue-after cue-before cursor direction display\ndominant-baseline drop-initial-after-adjust drop-initial-after-align\ndrop-initial-before-adjust drop-initial-before-align drop-initial-size\ndrop-initial-value elevation empty-cells fit fit-position flex flex-basis\nflex-direction flex-flow flex-grow flex-shrink flex-wrap float float-offset\nfont font-feature-settings font-family font-kerning font-language-override\nfont-size font-size-adjust font-stretch font-style font-synthesis\nfont-variant font-variant-alternates font-variant-caps\nfont-variant-east-asian font-variant-ligatures font-variant-numeric\nfont-variant-position font-weight hanging-punctuation height hyphens icon\nimage-orientation image-rendering image-resolution inline-box-align\njustify-content left letter-spacing line-break line-height line-stacking\nline-stacking-ruby line-stacking-shift line-stacking-strategy list-style\nlist-style-image list-style-position list-style-type margin margin-bottom\nmargin-left margin-right margin-top marker-offset marks marquee-direction\nmarquee-loop marquee-play-count marquee-speed marquee-style max-height\nmax-width min-height min-width move-to nav-down nav-index nav-left nav-right\nnav-up opacity order orphans outline outline-color outline-offset\noutline-style outline-width overflow overflow-style overflow-wrap overflow-x\noverflow-y padding padding-bottom padding-left padding-right padding-top page\npage-break-after page-break-before page-break-inside page-policy pause\npause-after pause-before perspective perspective-origin pitch pitch-range\nplay-during position presentation-level punctuation-trim quotes\nrendering-intent resize rest rest-after rest-before richness right rotation\nrotation-point ruby-align ruby-overhang ruby-position ruby-span size speak\nspeak-as speak-header speak-numeral speak-punctuation speech-rate stress\nstring-set tab-size table-layout target target-name target-new\ntarget-position text-align text-align-last text-autospace text-decoration\ntext-justify text-overflow text-decoration-color text-decoration-line\ntext-decoration-skip text-decoration-style text-emphasis text-emphasis-color\ntext-emphasis-position text-emphasis-style text-height text-indent\ntext-justify text-outline text-shadow text-space-collapse text-transform\ntext-underline-position text-wrap top transform transform-origin\ntransform-style transition transition-delay transition-duration\ntransition-property transition-timing-function unicode-bidi vertical-align\nvisibility voice-balance voice-duration voice-family voice-pitch voice-range\nvoice-rate voice-stress voice-volume volume white-space widows width\nword-break word-spacing word-wrap z-index '.split(/\s+/);
    valid_css_prop = {};
    for (_j = 0, _len1 = css_props.length; _j < _len1; _j++) {
      p = css_props[_j];
      valid_css_prop[p] = true;
    }
    _imw = ["", "ms-", "-moz-", "-webkit-", ""];
    css_needs_prefix = 'animation animation-delay animation-direction animation-duration\nanimation-iteration-count animation-name animation-play-state\nanimation-timing-function backface-visibility border-bottom-left-radius\nborder-bottom-right-radius border-image border-top-left-radius\nborder-top-right-radius box-align box-decoration-break box-direction\nbox-flex box-lines box-ordinal-group box-sizing column-count column-fill\ncolumn-gap column-rule column-rule-color column-rule-style\ncolumn-rule-width column-span column-width columns filter ime-mode opacity\noverflow-x overflow-y perspective perspective-origin text-align-last\ntext-autospace text-justify text-overflow'.split(/\s+/);
    prefixed_css_prop = {};
    for (_k = 0, _len2 = css_needs_prefix.length; _k < _len2; _k++) {
      p = css_needs_prefix[_k];
      prefixed_css_prop[p] = true;
    }
    parse_prop = function(prop, val, parent, open) {
      var line, pre, t, _l, _len3, _ref1;
      t = prop.replace(/_/g, '-');
      if (valid_css_prop[t]) {
        prop = t;
      }
      if (typeof val === 'object') {
        if (open) {
          this.rawnl("}");
        }
        parse_selector.call(this, prop, val, parent);
        return false;
      } else {
        if (!open) {
          this.rawnl("" + parent + " {");
        }
        line = "" + prop + ": " + val;
        if (typeof val === 'number') {
          line += this.unit;
        }
        line += ";";
        this.rawnl(line);
        if (prefixed_css_prop[prop]) {
          _ref1 = ["ms-", "-moz-", "-webkit-"];
          for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
            pre = _ref1[_l];
            this.rawnl("" + pre + line);
          }
        }
        return true;
      }
    };
    parse_selector = function(selector, obj, parent) {
      var o, open, prop, s, selectors, val, _l, _len3;
      if (parent) {
        selectors = (function() {
          var _l, _len3, _ref1, _results;
          _ref1 = parent.split(/\s*,\s*/);
          _results = [];
          for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
            p = _ref1[_l];
            _results.push((function() {
              var _len4, _m, _ref2, _results1;
              _ref2 = selector.split(/\s*,\s*/);
              _results1 = [];
              for (_m = 0, _len4 = _ref2.length; _m < _len4; _m++) {
                s = _ref2[_m];
                if (s.indexOf('&') >= 0) {
                  _results1.push(s.replace(/&/g, p));
                } else {
                  _results1.push("" + p + " " + s);
                }
              }
              return _results1;
            })());
          }
          return _results;
        })();
        selector = selectors.join(',');
      }
      open = false;
      if (this.options.format) {
        this._indent += '  ';
      }
      if (obj instanceof Array) {
        for (_l = 0, _len3 = obj.length; _l < _len3; _l++) {
          o = obj[_l];
          for (prop in o) {
            val = o[prop];
            open = parse_prop.call(this, prop, val, selector, open);
          }
        }
      } else if (typeof obj === 'object') {
        for (prop in obj) {
          val = obj[prop];
          open = parse_prop.call(this, prop, val, selector, open);
        }
      } else {
        throw Error("Don't know what to do with " + obj);
      }
      if (this.options.format) {
        this._indent = this._indent.slice(2);
      }
      if (open) {
        return this.rawnl("}");
      }
    };
    context.unit = 'px';
    context.css = function() {
      var arg, args, k, obj, v, _l, _len3, _len4, _m;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_l = 0, _len3 = args.length; _l < _len3; _l++) {
        arg = args[_l];
        if (arg instanceof Array) {
          for (_m = 0, _len4 = arg.length; _m < _len4; _m++) {
            obj = arg[_m];
            for (k in obj) {
              v = obj[k];
              parse_selector.call(this, k, v);
            }
          }
        } else if (typeof arg === 'object') {
          for (k in arg) {
            v = arg[k];
            parse_selector.call(this, k, v);
          }
        } else {
          throw Error("@css takes objects or arrays of objects");
        }
      }
      return null;
    };
    return context;
  };

  g_context = void 0;

  coffeemugg.render = function() {
    var args, options, template;
    template = arguments[0], options = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    if ((options != null ? options.plugins : void 0) != null) {
      throw Error("To install plugins to the global renderer, you must call coffeemugg.install_plugin.");
    }
    if (g_context == null) {
      g_context = CMContext();
    }
    if (options != null) {
      g_context.setOptions(options);
    }
    return g_context.render.apply(g_context, [template].concat(__slice.call(args))).toString();
  };

  coffeemugg.install_plugin = function(plugin) {
    if (typeof plugin === 'string') {
      plugin = require(plugin);
    }
    if (g_context == null) {
      g_context = CMContext();
    }
    return plugin.call(g_context, g_context);
  };

}).call(this);
