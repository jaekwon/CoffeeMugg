// Generated by CoffeeScript 1.3.3
(function() {
  var CMContext, HTMLPlugin, NEWLINE, coffee, coffeemugg, coffeescript_helpers, elements, logger, merge_elements,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof window !== "undefined" && window !== null) {
    coffeemugg = window.CoffeeMug = {};
    coffee = typeof CoffeeScript !== "undefined" && CoffeeScript !== null ? CoffeeScript : null;
    logger = {
      debug: function(msg) {
        return console.log("debug: " + msg);
      },
      info: function(msg) {
        return console.log("info: " + msg);
      },
      warn: function(msg) {
        return console.log("warn: " + msg);
      },
      error: function(msg) {
        return console.log("error: " + msg);
      }
    };
  } else {
    coffeemugg = exports;
    logger = require('nogg').logger('coffeemugg');
    coffee = require('coffee-script');
  }

  coffeemugg.version = '0.0.2';

  coffeemugg.doctypes = {
    'default': '<!DOCTYPE html>',
    '5': '<!DOCTYPE html>',
    'xml': '<?xml version="1.0" encoding="utf-8" ?>',
    'transitional': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',
    'strict': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">',
    'frameset': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">',
    '1.1': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">',
    'basic': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN" "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">',
    'mobile': '<!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.2//EN" "http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd">',
    'ce': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "ce-html-1.0-transitional.dtd">'
  };

  coffeescript_helpers = "var __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n__bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n__indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n__hasProp = {}.hasOwnProperty,\n__slice = [].slice;".replace(/\n/g, '');

  elements = {
    regular: 'a abbr address article aside audio b bdi bdo blockquote body button\
 canvas caption cite code colgroup datalist dd del details dfn div dl dt em\
 fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 head header hgroup\
 html i iframe ins kbd label legend li map mark menu meter nav noscript object\
 ol optgroup option output p pre progress q rp rt ruby s samp script section\
 select small span strong style sub summary sup table tbody td textarea tfoot\
 th thead time title tr u ul video',
    "void": 'area base br col command embed hr img input keygen link meta param\
 source track wbr',
    obsolete: 'applet acronym bgsound dir frameset noframes isindex listing\
 nextid noembed plaintext rb strike xmp big blink center font marquee multicol\
 nobr spacer tt',
    obsolete_void: 'basefont frame'
  };

  merge_elements = function() {
    var a, args, element, result, _i, _j, _len, _len1, _ref;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    result = [];
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      a = args[_i];
      _ref = elements[a].split(' ');
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        element = _ref[_j];
        if (!(result.indexOf(element) > -1)) {
          result.push(element);
        }
      }
    }
    return result;
  };

  coffeemugg.tags = merge_elements('regular', 'obsolete', 'void', 'obsolete_void');

  coffeemugg.self_closing = merge_elements('void', 'obsolete_void');

  NEWLINE = {};

  /*
  The rendering context and renderer.
  
  Usage:
  
    context = CMContext({
      format:yes,
      autoescape:yes,
      plugins:['sample_plugin_module']
    })
    context.render(myTemplateFunction, args...)
  
  options:
    format:     Format with newlines and tabs (default off)
    autoescape: Autoescape all strings (default off)
    plugins:    Array of plugins, which are functions that take a context as argument.
  */


  coffeemugg.CMContext = CMContext = function(options) {
    var context, plugin, plugins, _i, _len, _ref;
    if (options == null) {
      options = {};
    }
    options.format || (options.format = true);
    options.autoescape || (options.autoescape = false);
    context = {
      options: options,
      _buffer: '',
      _newline: '',
      _indent: '',
      render: function() {
        var args, contents;
        contents = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (typeof contents === 'string' && (coffee != null)) {
          eval("contents = function () {" + (coffee.compile(contents, {
            bare: true
          })) + "}");
        }
        this._newline = '';
        if (typeof contents === 'function') {
          contents.call.apply(contents, [this].concat(__slice.call(args)));
        }
        return this;
      },
      render_tag: function(name, args) {
        var a, attrs, contents, idclass, _i, _len;
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          a = args[_i];
          switch (typeof a) {
            case 'function':
              contents = a.bind(this);
              break;
            case 'object':
              attrs = a;
              break;
            case 'number':
            case 'boolean':
              contents = a;
              break;
            case 'string':
              if (args.length === 1) {
                contents = a;
              } else {
                if (a === args[0]) {
                  idclass = a;
                } else {
                  contents = a;
                }
              }
          }
        }
        this.text("" + this._newline + this._indent + "<" + name);
        if (idclass) {
          this.render_idclass(idclass);
        }
        if (attrs) {
          this.render_attrs(attrs);
        }
        if (__indexOf.call(coffeemugg.self_closing, name) >= 0) {
          this.text(' />');
        } else {
          this.text('>');
          this.render_contents(contents);
          this.text("</" + name + ">");
        }
        return NEWLINE;
      },
      render_idclass: function(str) {
        var classes, i, id, _i, _len, _ref;
        classes = [];
        str = String(str).replace(/"/, "&quot;");
        _ref = str.split('.');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i[0] === '#') {
            id = i.slice(1);
          } else {
            if (i !== '') {
              classes.push(i);
            }
          }
        }
        if (id) {
          this.text(" id=\"" + id + "\"");
        }
        if (classes.length > 0) {
          return this.text(" class=\"" + (classes.join(' ')) + "\"");
        }
      },
      render_attrs: function(obj) {
        var k, v, _results;
        _results = [];
        for (k in obj) {
          v = obj[k];
          if (typeof v === 'boolean' && v) {
            v = k;
          }
          if (v) {
            _results.push(this.text(" " + k + "=\"" + (String(v).replace(/"/, "&quot;")) + "\""));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      },
      render_contents: function() {
        var args, contents;
        contents = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (typeof contents === 'function') {
          if (this.options.format) {
            this._indent += '  ';
          }
          contents = contents.call.apply(contents, [this].concat(__slice.call(args)));
          if (this.options.format) {
            this._indent = this._indent.slice(2);
          }
          if (contents === NEWLINE) {
            this.text("" + this._newline + this._indent);
          }
        }
        switch (typeof contents) {
          case 'string':
          case 'number':
          case 'boolean':
            this.text(this.esc(contents));
        }
        return null;
      },
      esc: function(txt) {
        if (this.options.autoescape) {
          return this.h(txt);
        } else {
          return txt;
        }
      },
      h: function(txt) {
        return String(txt).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
      },
      doctype: function(type) {
        if (type == null) {
          type = 'default';
        }
        return this.text(this._indent + coffeemugg.doctypes[type]);
      },
      text: function(txt) {
        this._buffer += txt;
        this._newline = '\n';
        return null;
      },
      tag: function() {
        var args, name;
        name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return this.render_tag(name, args);
      },
      comment: function(cmt) {
        this.text("" + this._newline + this._indent + "<!--" + cmt + "-->");
        return NEWLINE;
      },
      toString: function() {
        return this._buffer;
      },
      reset: function() {
        this._buffer = '';
        this._newline = '';
        this._indent = '';
        return this;
      }
    };
    plugins = (_ref = options.plugins) != null ? _ref : [];
    plugins.unshift(HTMLPlugin);
    for (_i = 0, _len = plugins.length; _i < _len; _i++) {
      plugin = plugins[_i];
      if (typeof plugin === 'string') {
        plugin = require(plugin);
      }
      plugin(context);
    }
    return context;
  };

  HTMLPlugin = function(context) {
    var tag, _fn, _i, _len, _ref,
      _this = this;
    _ref = coffeemugg.tags.concat(coffeemugg.self_closing);
    _fn = function(tag) {
      return context[tag] = function() {
        return this.render_tag(tag, arguments);
      };
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tag = _ref[_i];
      _fn(tag);
    }
    context.ie = function(condition, contents) {
      this.text("" + this._newline + this._indent + "<!--[if " + condition + "]>");
      this.render_contents(contents);
      this.text("<![endif]-->");
      return NEWLINE;
    };
    context.coffeescript = function(param) {
      switch (typeof param) {
        case 'function':
          return this.script("" + coffeescript_helpers + "(" + param + ").call(this);");
        case 'string':
          return this.script({
            type: 'text/coffeescript'
          }, function() {
            return param;
          });
        case 'object':
          param.type = 'text/coffeescript';
          return this.script(param);
      }
    };
    return context;
  };

}).call(this);
